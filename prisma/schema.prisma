generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
}

enum UserRole {
  Admin
  Default
}

enum OrderStatus {
  OrderPlaced
  OrderConfirmed
  PaymentPending
  PaymentFailed
  PaymentProcessed
  OrderProcessing
  OrderPacked
  InTransit
  OutForDelivery
  Delivered
  OrderCompleted
  OrderCanceled
  WaitingForReview
  OrderReviewed
}

model User {
  id                         Int               @id @default(autoincrement())
  name                       String
  username                   String            @unique
  email                      String            @unique
  password                   String
  role                       UserRole          @default(Default)
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @default(now())
  createdByProductCategories ProductCategory[] @relation("CreatedByProductCategories")
  updatedByProductCategories ProductCategory[] @relation("UpdatedByProductCategories")
  createdByProducts          Product[]         @relation("CreatedByProducts")
  updatedByProducts          Product[]         @relation("UpdatedByProducts")
  userProductReviews         ProductReview[]
  wishLists                  WishList[]
  carts                      Cart[]
  addresses                  UserAddress[]
  orders                     Order[]
}

model ProductCategory {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  description   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  createdByUser User      @relation("CreatedByProductCategories", fields: [createdBy], references: [id])
  createdBy     Int
  updatedByUser User      @relation("UpdatedByProductCategories", fields: [updatedBy], references: [id])
  updatedBy     Int
  products      Product[]
}

model Product {
  id                Int             @id @default(autoincrement())
  name              String
  description       String
  price             Float
  isVisible         Boolean
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  createdByUser     User            @relation("CreatedByProducts", fields: [createdBy], references: [id])
  createdBy         Int
  updatedByUser     User            @relation("UpdatedByProducts", fields: [updatedBy], references: [id])
  updatedBy         Int
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int
  productReviews    ProductReview[]
  wishLists         WishList[]
  productInCarts    ProductInCart[]
}

model ProductReview {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  grade       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
}

model WishList {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Cart {
  id       Int             @id @default(autoincrement())
  amount   Int
  user     User            @relation(fields: [userId], references: [id])
  userId   Int
  products ProductInCart[]
}

model ProductInCart {
  id        Int     @id @default(autoincrement())
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model UserAddress {
  id                Int     @id @default(autoincrement())
  name              String
  firstAddressLine  String
  secondAddressLine String?
  country           String
  region            String
  zipPostalCode     String
  city              String
  user              User    @relation(fields: [userId], references: [id])
  userId            Int
}

model Order {
  id     Int         @id @default(autoincrement())
  status OrderStatus @default(OrderPlaced)
  user   User        @relation(fields: [userId], references: [id])
  userId Int
}
